" =================================================================================================
" Notes
" =================================================================================================
"
" Swap files:
"     We're enabling swap files. This means that .swp or
"     .swo files will be created. They have to be ignored
"     for git so adding a global gitignore file that ignores
"     those is helpful
"


" =================================================================================================
" General Configuration
" =================================================================================================

" turn this on for lots of cool vim shit
" :help 'nocompatible'
set nocompatible

" enable 256 color mode
" :help 't_Co'
set t_Co=256

" set the clipboard to unnamed so we can yank into the systems clipboard
" :help 'clipboard'
set clipboard=unnamed

" Enable file type detection and automatic language-dependant indenting
" :help 'filetype'
filetype plugin indent on

" Ignore specific files in vim
" :help 'wildignore'
set wildignore+=*/.git,*/tmp/*,*.so,*.swp,*.zip

" make backspace key work in the same behaviour as other applications
" :help 'backspace'
set backspace=indent,eol,start

" turn on syntax highlighting
syntax on

" Set lazyredraw on for performance improvements
" :help 'lazyredraw'
set lazyredraw

" Configure the leader to be Space and local leader to be \ 
" :help 'mapleader'
" :help 'maplocalleader'
let mapleader = "\<Space>"
let maplocalleader = "\\"

" Configure relative line numbers cause they're amazing!
" Auto toggle between relative and absolute line numbers on insert / view mode
" :help 'number'
set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Configure indentation to always use spaces instead of tabs and indent by 2
" spaces instead of the default 8
set expandtab 
set autoindent
set history=500
set tabstop=2
set shiftwidth=2
set softtabstop=2
set colorcolumn=100

" Set symbols that indicate tabs and white spaces and use light grey colour
" :help 'list'
" :help 'listchars
set list
set listchars=tab:→\
set listchars+=trail:·
set listchars+=space:·
highlight NonText ctermfg=lightgrey
highlight SpecialKey ctermfg=lightgrey

" Enable spell checks and set the default language to English 
" Overwrite how the spelling errors should be highlighted using hi
" :help 'spell'
set spell
set ignorecase smartcase
set spelllang=en_gb
highlight clear SpellBad
highlight SpellBad cterm=undercurl ctermfg=red


" =================================================================================================
" Actions + Functions
" =================================================================================================

" Moving selected line up or down
" Usage: Press <leader> and j (up) or k (down)
nnoremap <leader>j :m .+1<CR>==
nnoremap <leader>k :m .-2<CR>==

" Helper function to automatically clean trailing white spaces
function! <SID>StripTrailingWhitespaces()
  let _s=@/
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  let @/=_s
  call cursor(l, c)
endfunction

" Automatically run StripTrailingWhitespaces function on file save on the
" given file names
autocmd BufWritePre *.js,*.jsx,*.ts,*.tsx,*.py,*.feature, :call <SID>StripTrailingWhitespaces()

" Creating Panes + Resizing
" Usage:
" - Create new horizontal split pane: CTRL + w + V
" - Resize vertical: left and right arrow keys
" - Resize horizontal: up and down arrow keys
noremap <silent> <Left>  :exe "vertical resize " . (winwidth(0) - 5)<CR>
noremap <silent> <Right> :exe "vertical resize " . (winwidth(0) + 5)<CR>
noremap <silent> <Up>    :exe "resize " . (winheight(0) - 5)<CR>
noremap <silent> <Down>  :exe "resize " . (winheight(0) + 5)<CR>

" Viewing linting errors
" Usage: run leader + l to display all errors
noremap <leader>l :LspDocumentDiagnostics<CR>

" Auto-Formatting w/ prettier when leaving the insert mode
let g:prettier#quickfix_enabled = 0
autocmd TextChanged,InsertLeave *.js,*.jsx,*.mjs,*.ts,*.tsx,*.json,*.graphql,*.md,*.yaml,*.html PrettierAsync

" Fuzzy Finding using fzf
set rtp+=/usr/local/opt/fzf
noremap <leader>f :FZF<CR>

